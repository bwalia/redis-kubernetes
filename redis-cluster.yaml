# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: redis-pvc
#   namespace: dev
# spec:
#   accessModes:
#   - ReadWriteOnce
#   resources:
#     requests:
#       storage: 2Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-bootstrap-cm-dev
  namespace: dev
data:
    backup-database.sh: |
      #!/bin/bash
      TIMESTAMP=$(date +%Y-%m-%d-%H-%M)
      if [ -z "$BACKUP_FREQUENCY" ]; then
        echo "BACKUP_FREQUENCY is not set"
        BACKUP_FREQUENCY="hourly"
      fi
      echo "Dumping redis data"
      REDIS_CLI_BIN=$(which redis-cli)
      if [ -z "$REDIS_CLI_BIN" ]; then
            echo "redis-cli not found but we will continue with the backup without flushing the redis data"
      else
            echo save | $REDIS_CLI_BIN
      fi
      # mc --version
      source /tmp/secrets/.env
      TAR_UTIL_BIN=$(which tar)
      if [ -z "$TAR_UTIL_BIN" ]; then
            echo "tar util not found but we will continue with the backup without compressing the redis data"
        REDIS_DUMP_FILE="/redis-dump/dump.rdb"
        DUMP_BACKUP_FILE="redis-dump-$TIMESTAMP.rdb"
        DUMP_LATEST_FILE="redis-dump-latest.rdb"
      else
      tar -czvf /tmp/redis-dump.tar.gz /redis-dump
        REDIS_DUMP_FILE="/tmp/redis-dump.tar.gz"
        DUMP_BACKUP_FILE="redis-dump-$TIMESTAMP.tar.gz"
        DUMP_LATEST_FILE="redis-dump-latest.tar.gz"
      fi

      if [ -f $REDIS_DUMP_FILE ]; then
      mc config host add myminio $MINIO_ENDPOINT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY
              echo "Backup frequency is $BACKUP_FREQUENCY"
              mc cp $REDIS_DUMP_FILE myminio/wf-dev-db-backups/$BACKUP_FREQUENCY/$DUMP_BACKUP_FILE
              # Always save the latest dump file as redis-dump-latest.rdb or tar.gz
              mc cp $REDIS_DUMP_FILE myminio/wf-dev-db-backups/hourly/$DUMP_LATEST_FILE
              echo "$REDIS_DUMP_FILE found OK and copied to minio bucket."

      else
      echo "$REDIS_DUMP_FILE not found backup failed."
      fi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-server
  namespace: dev
spec:
  serviceName: redis-server
  replicas: 1
  selector:
    matchLabels:
      app: redis-server
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: redis-server
    spec:
      volumes:
        - name: redis-data-vol
          persistentVolumeClaim:
            claimName: redis-pvc
        - name: redis-bootstrap-cm-vol
          configMap:
            name: redis-bootstrap-cm-dev
        - name: wf-env-vol-dev
          secret:
            secretName: wf-api-secret-dev
            items:
            - key: env_file
              path: .env

      initContainers:
      - name: redis-init
        image: busybox
        command: ["sh", "-c", "ls -la /redis-dump/"]
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: redis-data-vol
          mountPath: /redis-dump

      - name: redis-dump
        image: minio/mc 
        env:
        - name: BACKUP_FREQUENCY
          value: "before-redis-cluster-updated"
        command: ["sh", "-c", "cp /tmp/configmap/backup-database.sh /usr/local/bin/backup-database.sh && chmod +x /usr/local/bin/backup-database.sh && bash /usr/local/bin/backup-database.sh"]
        volumeMounts:
        - name: redis-data-vol
          mountPath: /redis-dump
        - name: redis-bootstrap-cm-vol
          mountPath: /tmp/configmap
        - name: wf-env-vol-dev
          mountPath: /tmp/secrets

      containers:
      - name: redis-server
        image: bwalia/redis:latest
        volumeMounts:
        - name: redis-data-vol
          mountPath: /data
      # Moved to cronjob    
      # - name: redis-dump-sidecar
      #   image: minio/mc 
      #   env:
      #   - name: BACKUP_FREQUENCY
      #     value: "hourly"
      #   command: ["sh", "-c", "cp /tmp/configmap/backup-database.sh /usr/local/bin/backup-database.sh && chmod +x /usr/local/bin/backup-database.sh && bash /usr/local/bin/backup-database.sh hourly"]
      #   volumeMounts:
      #   - name: redis-data-vol
      #     mountPath: /redis-dump
      #   - name: redis-bootstrap-cm-vol
      #     mountPath: /tmp/configmap
      #   - name: wf-env-vol-dev
      #     mountPath: /tmp/secrets

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: dev
spec:
  selector:
    app: redis-server
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
  type: ClusterIP
---
# Source: wf/templates/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: wf-dev-db-backup-hourly
  namespace: dev
spec:
  schedule: "0 * * * *"
  #testing 1 min "0 */1 * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          containers:
          - name: "wf-db-backup-dev-hourly"
            image: bwalia/redis:latest
            imagePullPolicy: Always
            command:
              - /bin/sh
              - -c
              - --
            args:
              - cp /tmp/configmap/backup-database.sh /usr/local/bin/backup-database.sh && chmod +x /usr/local/bin/backup-database.sh && bash /usr/local/bin/backup-database.sh
              # sleep infinity
            env:
              - name: DB_BACKUP_JOB_NAME
                value: wf-dev-db-backup-hourly
              - name: BACKUP_FREQUENCY
                value: hourly
            envFrom:
            resources:
              null
            volumeMounts:
              - name: redis-data-vol
                mountPath: /redis-dump
              - name: wf-env-vol-dev
                mountPath: "/tmp/secrets"
                readOnly: false
              - name: redis-bootstrap-cm-vol
                mountPath: "/tmp/configmap"
                readOnly: false
          volumes:
            - name: redis-data-vol
              persistentVolumeClaim:
                claimName: redis-pvc
            - name: wf-env-vol-dev
              secret:
                secretName: wf-api-secret-dev
                items:
                - key: env_file
                  path: .env
                optional: false
            - name: redis-bootstrap-cm-vol
              configMap:
                name: redis-bootstrap-cm-dev
      backoffLimit: 0
---
# Source: wsl/templates/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: wf-dev-db-backup-daily
  namespace: dev
spec:
  schedule: "0 4 * * *"
  #testing 1 min "0 */1 * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          containers:
          - name: wf-db-backup-dev-daily
            image: bwalia/redis:latest
            imagePullPolicy: Always
            command:
              - /bin/sh
              - -c
              - --
            args:
              - cp /tmp/configmap/backup-database.sh /usr/local/bin/backup-database.sh && chmod +x /usr/local/bin/backup-database.sh && bash /usr/local/bin/backup-database.sh
              # cp /tmp/configmap/backup-database.sh /usr/local/bin/backup-database.sh && chmod +x /usr/local/bin/backup-database.sh && bash /usr/local/bin/backup-database.sh
              # sleep infinity
            env:
              - name: DB_BACKUP_JOB_NAME
                value: wf-dev-db-backup-daily
              - name: BACKUP_FREQUENCY
                value: daily
            envFrom:
            resources:
              null
            volumeMounts:
              - name: redis-data-vol
                mountPath: /redis-dump
              - name: wf-env-vol-dev
                mountPath: "/tmp/secrets"
                readOnly: false
              - name: redis-bootstrap-cm-vol
                mountPath: "/tmp/configmap"
                readOnly: false
          volumes:
            - name: redis-data-vol
              persistentVolumeClaim:
                claimName: redis-pvc
            - name: wf-env-vol-dev
              secret:
                secretName: wf-api-secret-dev
                items:
                - key: env_file
                  path: .env
                optional: false
            - name: redis-bootstrap-cm-vol
              configMap:
                name: redis-bootstrap-cm-dev
      backoffLimit: 0
